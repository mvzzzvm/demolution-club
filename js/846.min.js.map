{"version":3,"file":"846.min.js","mappings":"sIAsBA,SAASA,EAAeC,GACtB,OAAQ,GAAKA,GAAKC,SAAS,EAAG,KClBzB,SAASC,IAEd,MAAMC,EAAW,iBACXC,EAAaC,SAASC,cAAcH,GAC1C,GAAIC,GACAA,EAAY,CACd,MAAMG,EAAc,CAClBC,QAAS,CAAC,KAAY,MAKtBC,aAAc,GACdC,WAAY,CACVC,OAAQ,GAAGR,wBACXS,OAAQ,GAAGT,yBAEbU,WAAY,CACVC,GAAI,GAAGX,uBACPY,WAAW,GAEbC,YAAa,CACX,KAAM,CACJP,aAAc,GACdQ,cAAe,GAEjB,IAAK,CACHA,cAAe,EACfR,aAAc,IAEhB,IAAK,CACHQ,cAAe,IAGnBC,GAAI,CACFC,UAAYC,IACV,IAAIC,SAAS,CACXC,UAAWF,EAAON,GAClBS,kBAAmB,eACnBC,gBAAgB,OAUxB,IAAIC,EAAU,IAAIC,KAClBD,EAAQE,SAAS,GAAI,EAAG,EAAG,GDvDxB,SAAeC,EAAeH,GACnC,IACII,EAAOJ,EADD,IAAIC,KAEVI,EAASzB,SAAS0B,iBCqDd,UDpDSC,aAAY,WAC3B,IAAIC,EAAU,IAAIP,KAAKG,GACvB,IAAK,MAAMK,KAASJ,EAAQ,CAC1B,MAAMK,EAAQD,EAAM5B,cAAc,iBAC5B8B,EAAUF,EAAM5B,cAAc,mBAC9B+B,EAAUH,EAAM5B,cAAc,mBACpC6B,EAAMG,YAAcL,EAAQM,WAC5BH,EAAQE,YAAcvC,EAAekC,EAAQO,cAC7CH,EAAQC,YAAcvC,EAAekC,EAAQQ,cAO/CZ,GAAQ,MACP,KCoCDK,CAAM,EAAUT,GAEhB,IAAI,KAAOrB,EAAYG","sources":["webpack://webdev/./src/js/modules/timer.js","webpack://webdev/./src/js/modules/plans-swiper.js"],"sourcesContent":["export function timer(timerSelector, endTime) {\n  let now = new Date();\n  let diff = endTime - now;\n  let timers = document.querySelectorAll(timerSelector);\n  const interval = setInterval(function () {\n    let current = new Date(diff);\n    for (const timer of timers) {\n      const hours = timer.querySelector(\".timer__hours\");\n      const minutes = timer.querySelector(\".timer__minutes\");\n      const seconds = timer.querySelector(\".timer__seconds\");\n      hours.textContent = current.getHours();\n      minutes.textContent = toPaddedString(current.getMinutes());\n      seconds.textContent = toPaddedString(current.getSeconds());\n      //   console.log(\n      //     current.getHours(),\n      //     current.getMinutes(),\n      //     current.getSeconds()\n      //   );\n    }\n    diff -= 1000;\n  }, 1000);\n}\nfunction toPaddedString(int) {\n  return (\"\" + int).padStart(2, \"0\");\n}\n","import Swiper, { Navigation, Pagination } from \"swiper\";\r\n// import \"swiper/css/effect-creative\";\r\n// import \"swiper/css\";\r\nimport { timer } from \"./timer.js\";\r\n\r\nexport function init(){\r\n  // console.log('initPlansSlider()')\r\n  const selector = \".plans__slider\"\r\n  const mainSlider = document.querySelector(selector);\r\n  if(!mainSlider) return \r\n  if (mainSlider) {\r\n    const mainOptions = {\r\n      modules: [Navigation, Pagination],\r\n      // observer: true,\r\n      // observeParents: true,\r\n      // resizeObserver: true,\r\n      // updateOnWindowResize: true,\r\n      spaceBetween: 15,\r\n      navigation: {\r\n        prevEl: `${selector} .swiper-button-prev`,\r\n        nextEl: `${selector} .swiper-button-next`,\r\n      },\r\n      pagination: {\r\n        el: `${selector} .swiper-pagination`,\r\n        clickable: true,\r\n      },\r\n      breakpoints: {\r\n        1140: {\r\n          spaceBetween: 30,\r\n          slidesPerView: 2,\r\n        },\r\n        900: {\r\n          slidesPerView: 2,\r\n          spaceBetween: 30,\r\n        },\r\n        480: {\r\n          slidesPerView: 2,\r\n        },\r\n      },\r\n      on: {\r\n        afterInit: (swiper) => {\r\n          new LazyLoad({\r\n            container: swiper.el,\r\n            elements_selector: '.swiper-lazy',\r\n            cancel_on_exit: false\r\n          });\r\n        }\r\n      }\r\n    };\r\n    // new LazyLoad({\r\n    //   elements_selector: selector,\r\n    //   unobserve_entered: false,\r\n    //   callback_enter: () => new Swiper(mainSlider, mainOptions)\r\n    // })\r\n    let endTime = new Date();\r\n    endTime.setHours(24, 0, 0, 0);\r\n    timer(\".timer\", endTime)\r\n\r\n    new Swiper(mainSlider, mainOptions)\r\n  }\r\n}"],"names":["toPaddedString","int","padStart","init","selector","mainSlider","document","querySelector","mainOptions","modules","spaceBetween","navigation","prevEl","nextEl","pagination","el","clickable","breakpoints","slidesPerView","on","afterInit","swiper","LazyLoad","container","elements_selector","cancel_on_exit","endTime","Date","setHours","timerSelector","diff","timers","querySelectorAll","setInterval","current","timer","hours","minutes","seconds","textContent","getHours","getMinutes","getSeconds"],"sourceRoot":""}